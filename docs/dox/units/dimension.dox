/** \class scifir::dimension
* \brief Class that represents dimensions of the SI system of units. Each dimension sizes 6 bytes, 1 byte for the dimension type, 1 byte for the prefix, 1 byte for the position (which can be the NUMERATOR or the DENOMINATOR), and 3 bytes for the custom dimension (in case it's used one). A **base dimension** is a dimension that doesn't has more base dimensions, a **derived dimension** has always base dimensions from which it's defined.

* \enum scifir::dimension::position
* \brief Represents the position of the dimension, which can be at the numerator or at the denominator. The value NO_POSITION is used when there's no position specified.

* \var dimension::NO_POSITION
* \brief The dimension is not ready and yet being used.

* \var dimension::NUMERATOR
* \brief The dimension is at the numerator.

* \var dimension::DENOMINATOR
* \brief The dimension is at the denominator.

* \enum scifir::dimension::type
* \brief Represents a dimension of the SI system of units. All the dimensions of the SI system of units are supported. There are also dimensions supported that aren't considered yet part of the SI system of units, but that are widely used.

* \var dimension::NONE
* \brief No dimension. Default value for the default constructor.

* \var dimension::METRE
* \brief Meter, plural meters. **SI dimension** of length. Symbol **m**.

* \var dimension::DEGREE
* \brief Degree, plural degrees. Dimension of angle. Symbol **θ**.

* \var dimension::RADIAN
* \brief Radian, plural radians. Dimension of angle. **Special name**. Symbol **rad**.

* \var dimension::STERADIAN
* \brief Steradian, plural steradians. Dimension of solid angle. A solid angle is an angle in volume. **Special name**. Symbol **sr**.

* \var dimension::SECOND
* \brief Second, plural seconds. **SI dimension** of time. Symbol **s**.

* \var dimension::GRAM
* \brief Gram, plural grams. **SI dimension** of mass. Symbol **g**.

* \var dimension::COULOMB
* \brief Coulomb, plural coulombs. **SI dimension** of charge. **Special name**. Symbol **C**.

* \var dimension::KELVIN
* \brief Kelvin, plural kelvins. **SI dimension** of temperature. Symbol **K**.

* \var dimension::CELSIUS
* \brief Celsius, plural celsius. **SI dimension** of temperature, derived from kelvin. Symbol **°C**. **Formula:** 1°C = K - 273.15.

* \var dimension::MOLE
* \brief Mole, plural moles. **SI dimension** of quantity. Symbol **mol**.

* \var dimension::CANDELA
* \brief Candela, plural candelas. **SI dimension** of luminous intensity. Symbol **cd**.

* \var dimension::BYTE
* \brief Byte, plural bytes. Dimension of amount of information. Symbol **B**.

* \var dimension::BIT
* \brief Bit, plural bits. Dimension of amount of information, of each binary digit. Symbol **bit**.

* \var dimension::HERTZ
* \brief Hertz, plural hertz. The derived dimensions are **1 / s**. Dimension of frequency. **Special name**. Symbol **Hz**.

* \var dimension::NEWTON
* \brief Newton, plural newtons. The derived dimensions are **kg * m / s2**. Dimension of force. **Special name**. Symbol **N**.

* \var dimension::DIMENSION_PASCAL
* \brief Pascal, plural pascals. The derived dimensions are **kg / s2 * m**. Dimension of pressure. **Special name**. Symbol **Pa**. It's not called PASCAL to be compatible with the compiler msvc.

* \var dimension::JOULE
* \brief Joule, plural joules. The derived dimensions are **kg * m2 / s2**. Dimension of energy. **Special name**. Symbol **J**.

* \var dimension::WATT
* \brief Watt, plural watts. The derived dimensions are **kg * m2 / s3**. Dimension of power. **Special name**. Symbol **W**.

* \var dimension::AMPERE
* \brief Ampere, plural amperes. The derived dimensions are  **C / s**. Dimension of electric current. Symbol **A**.

* \var dimension::VOLT
* \brief Volt, plural volts. The derived dimensions are  **J / C**, **W / A**. Dimension of voltage. **Special name**. Symbol **V**.

* \var dimension::FARAD
* \brief Farad, plural farads. The derived dimensions are  **A * s / V**. Dimension of electric capacitance. **Special name**. Symbol **F**.

* \var dimension::OHM
* \brief Ohm, plural ohms. The derived dimensions are  **V / A**. Dimension of electric resistance. **Special name**. Symbol **Ω**.

* \var dimension::SIEMENS
* \brief Siemens, plural siemens. The derived dimensions are  **1 / Ω**. Dimension of electric conductance. **Special name**. Symbol **S**.

* \var dimension::WEBER
* \brief Weber, plural webers. The derived dimensions are  **T * m2**. Dimension of magnetic flux. **Special name**. Symbol **Wb**.

* \var dimension::TESLA
* \brief Tesla, plural teslas. The derived dimensions are  **V * s / m2**. Dimension of magnetic strength. **Special name**. Symbol **T**.

* \var dimension::HENRY
* \brief Henry, plural henries. The derived dimensions are  **V * s / A**. Dimension of electric inductance. **Special name**. Symbol **H**.

* \var dimension::LUMEN
* \brief Lumen, plural lumens. The derived dimensions are  **cd * sr** Dimension of luminous flux. **Special name**. Symbol **lm**.

* \var dimension::LUX
* \brief Lux, plural luxes. The derived dimensions are  **cd * sr / m2**. Dimension of illuminance. **Special name**. Symbol **lx**.

* \var dimension::BECQUEREL
* \brief Becquerel, plural becquerels. The derived dimensions are  **1 / s**. Dimension of radioactivity. **Special name**. Symbol **Bq**.

* \var dimension::GRAY
* \brief Gray, plural grays. The derived dimensions are  **m2 / s2**. Dimension of ionising radiation (absorbed dose). **Special name**. Symbol **Gy**.

* \var dimension::SIEVERT
* \brief Sievert, plural sieverts. The derived dimensions are  **J / kg**. Dimension of ionising radiation (equivalent dose). **Special name**. Symbol **Sv**.

* \var dimension::KATAL
* \brief Katal, plural katals. The derived dimensions are **mol / s**. Dimension of catalytic activity. **Special name**. Symbol **kat**.

* \var dimension::ANGSTROM
* \brief Ángstrom, plural angstroms. The derived dimensions are **10^-10 m**. Dimension of length, used mainly for wavelengths. Symbol **Å**.

* \var dimension::LITRE
* \brief Litre, plural litres. The derived dimensions are **dm3**. Dimension of volume. Symbol **L**.

* \var dimension::MINUTE
* \brief Minute, plural minutes. The derived dimensions are **60 s**. Dimension of time. Symbol **min**.

* \var dimension::HOUR
* \brief Hour, plural hours. The derived dimensions are **3,600 s**. Dimension of time. Symbol **hour**, the abbreviation "h" is not used because it would be easy to confuss it with the H of the Henry dimension.

* \var dimension::DAY
* \brief Day, plural days. The derived dimensions are **86,400 s**. Dimension of time. Symbol **day**, the abbreviation "d" is not used because it would be easy to confuss it with the d of the deci prefix.

* \var dimension::LIGHT_YEAR
* \brief Light year, plural light years. Dimension of length. The derived dimensions are  **9,460,730,472,580,800 m**. Defined as all the distance travelled by light in one year. Symbol **ly**.

* \var dimension::ASTRONOMICAL_UNIT
* \brief Astronomical unit, plural astronomical units. Dimension of length. The derived dimensions are  **149,597,870,700 m**. Defined as the distance from the Sun to the Earth. Symbol **AU**.

* \var dimension::PARSEC
* \brief Parsec, plural parsecs. Dimension of length. The derived dimensions are  **3.2616 ly**. Defined as the distance where 1 AU subtends an angle of 1 second of arc. Equivalent to 3.26156 light years. Symbol **pc**.

* \var dimension::ELECTRON_VOLT
* \brief Electron volt, plural electron volts. The derived dimensions are  **1.602176634 * 10^−19 J**. Dimension of energy. Symbol **eV**.

* \var dimension::DALTON
* \brief Dalton, plural daltons. The derived dimensions are **1,66053886 * 10^-24**. Dimension of mass. Used to measure the mass of atoms and molecules. Defined as 1/12 of a C-12. Symbol **Da**.

* \var dimension::ATOMIC_MASS_UNIT
* \brief Atomic mass unit, plural atomic mass units. The derived dimensions are **Da**. Equivalent to the Dalton. Dimension of mass. Used to measure the mass of atoms and molecules. Symbol **amu**.

* \var dimension::BARN
* \brief Barn, plural barns. Dimension of area. The derived dimensions are  **10^-28 m2**. It's used inside nuclear physics to express the transversal section of nucleus and nuclear reactions. Symbol **barn**.

* \var dimension::MOLARITY
* \brief Molarity, plural molarities. The derived dimensions are **mol / L**. Dimension of concentration of a chemical species. Symbol **M**.

* \var dimension::PARTICLES
* \brief Total of particles, the total amount that the mole represents. It's not exactly a dimension, it corresponds to the brute amount of particles. Symbol **particles**, it's not exactly a symbol but rather a name for the total of particles.

* \var dimension::CUSTOM
* \brief Custom dimension. It means the dimension is a custom dimension, which can have any value and meaning, defined freely by the programmer. Each custom dimension is unique to where it's defined and used.

* \var dimension::CUSTOM_BASIC
* \brief 

* \var dimension::CUSTOM_FULL_SYMBOL
* \brief Custom dimension. It's identical to a CUSTOM dimension in his use, but its symbol is stored in the static map full_symbols of dimension class. All symbols greather than two are stored there, because they don't fit in the member-variable char symbol[3] of dimension class.

* \var dimension::MONEY
* \brief Money, plural money. The money is not specified in a specific currency, you must use the ISO 4217 of currencies for that purpose. Don't mistake mixing different currencies. Symbol **money**.

* \var dimension::PIXEL
* \brief Pixel, plural pixels. it represents the amount of pixels, it can be used as a replacemet of the metre inside a screen. It can also be used as distance, in replacement of length dimensions, if in a virtual space it's thinked in pixels instead of normal dimensions of length. Symbol **px**.

* \var dimension::MEMO
* \brief Memo, plural memos. Invented unit inside Scifir, it's not part of the SI system of units. It represents a unit of human or animal memory. Each memory of the brain has some size hypothetically measurable in memos. Symbol **memo**.

* \var dimension::INTERNATIONAL_UNIT
* \brief International unit, plural international units. It measures the amount of effect or biological activity of a substance, for the purpose of easier comparison across similar forms of substances. The international units aren't part of the SI system of units. Symbol **IU**.

* \var dimension::MILLIEQUIVALENT
* \brief Milliequivalent, plural Milliequivalents. Amount of moles in a given chemical reaction needed to react with an amount of moles of another substance. Symbol **mEq**.

* \fn dimension::dimension()
* \brief Default constructor. The dimension_type is NONE, the dimension_position is NO_POSITION, and the prefix is NONE, the symbol is empty.

* \fn dimension::dimension(const dimension& x)
* \brief Copy constructor. The dimension is initialized to be a copy of the dimension x.

* \fn dimension::dimension(dimension&& x)
* \brief Move constructor. The dimension is initialized with a move of the dimension x.

* \fn dimension::dimension(dimension::type new_dimension_type, scifir::prefix::type new_prefix, dimension::position new_position)
* \brief Constructor. The dimension is initialized to the dimension_type, the prefix type and the position given.

* \fn dimension::dimension(dimension::type new_dimension_type, const scifir::prefix& new_prefix, dimension::position new_position)
* \brief Constructor. The dimension is initialized to the dimension_type, the prefix and the position given.

* \fn dimension::dimension(const string& init_dimension, dimension::position new_position)
* \brief Constructor. The dimension is initialized with an initialization string of dimension and the position given.

* \fn dimension& dimension::operator =(const dimension& x)
* \brief Copy assignment. The dimension copies the dimension x.

* \fn dimension& dimension::operator =(dimension&& x)
* \brief Move assignment. The dimension values are all moved from the dimension x.

* \fn string dimension::get_name() const
* \brief Returns the name of the dimension.

* \fn string dimension::get_fullname() const
* \brief Returns the name of the dimension with the name of the prefix first.

* \fn string dimension::get_plural() const
* \brief Returns the plural of the dimension.

* \fn string dimension::get_fullplural() const
* \brief Returns the plural of the dimension with the name of the prefix first.

* \fn string dimension::get_symbol() const
* \brief Returns the symbol of the dimension. In the case of a custom dimension, it returns the custom dimension defined.

* \fn long double dimension::get_conversion_factor() const
* \brief Returns the conversion factor of the dimension.

* \fn long double dimension::prefix_math() const
* \brief Returns the math between the prefix and the dimension, which varies if the dimension is a B or another. In the case of bytes the math with the prefix is different, it's done with 1024 instead of multiples of 10. It doesn't includes the conversion factor of dimensions.

* \fn long double dimension::prefix_math(const prefix& x_prefix) const
* \brief Returns the math between some prefix and the dimension. The difference with the other prefix_math() function is that the prefix is given as parameter.

* \fn bool dimension::is_simple_dimension() const
* \brief If the dimension doesn't has more base dimensions, it's a simple dimension.

* \fn bool dimension::is_composite_dimension() const
* \brief If the dimension has more simple dimensions, it's a composite dimension.

* \fn bool dimension::is_base_dimension() const
* \brief Returns true if the dimension is a base dimension, which includes all base dimensions of the SI system of units, excepting AMPERE, which has been changed for COULOMB. Additional to the base dimensions of the SI system of units, they are considered base dimensions too RADIAN, STERADIAN, BYTE, MONEY, MEMO, and all CUSTOM_BASIC dimensions.

* \fn bool dimension::is_derived_dimension() const
* \brief If the dimension is not a base dimension, it's considered a derived dimension.

* \fn bool dimension::is_SI_base_dimension() const
* \brief Returns true if the dimension is a SI base dimension. Following the SI system of units, only are base dimensions the METRE, the GRAM, the SECOND, the AMPERE, the KELVIN, the MOLE and the CANDELA.

* \fn bool dimension::is_SI_derived_dimension() const
* \brief If the dimension is not a SI base dimension, it's considered a SI derived dimension.

* \fn bool dimension::is_dimensionless() const
* \brief If the dimension_type is DEGREE, RADIAN or STERADIAN, it's considered dimensionless, following the SI system of units.

* \fn vector<dimension> dimension::get_base_dimensions() const
* \brief Returns the base dimensions of the dimensions, which can be the same dimension or all the base dimension this dimension has, if it's a derived dimension.

* \fn void dimension::invert()
* \brief Changes the position of the dimension to the reverse, from the NUMERATOR to the DENOMINATOR, or from the DENOMINATOR to the NUMERATOR.

* \fn static void dimension::create_custom_dimension(const string& new_symbol, const string& init_dimensions)
* \brief Creates a new custom dimension, that's stored with its symbol, which is given as an string, and the base dimensions it has, if this custom dimension is not a new base dimension.

* \fn static char* dimension::create_full_symbol(const string& full_symbol)
* \brief Creates a new dimension that's stored in the private static map dimension::full_symbols.

* \fn static string dimension::get_full_symbol(const char* x_symbol)
* \brief Returns the symbol of a custom_full_symbol dimension stored in the private static map dimension::full_symbols.

* \var scifir::prefix dimension::prefix
* \brief The prefix of the dimension. It's used along with the symbol of the dimension when printing it.

* \var dimension::type dimension::dimension_type
* \brief The type of the dimension.

* \var dimension::position dimension::dimension_position
* \brief The position of the dimension, which can be the NUMERATOR, the DENOMINATOR or NO_POSITION. NO_POSITION means that the dimension is not ready to be used, and must be changed if the dimension is intended to be used.

* \var char dimension::symbol[3]
* \brief The value of the position of the character of a custom dimension in the map of full_symbols.

* \fn vector<dimension> scifir::create_dimensions(string init_dimensions)
* \brief Creates the dimensions from an initialization string of dimensions

* \fn vector<dimension> scifir::create_base_dimensions(const string& init_dimensions)
* \brief Creates the base dimensions from an initialization string of dimensions

* \fn string scifir::to_string(const dimension& x)
* \brief Creates the string representation of a dimension

* \fn string scifir::to_string(const vector<dimension>& x_dimensions, bool with_brackets)
* \brief Creates the string representation of a vector of dimensions. Used to display the dimensions of scalar_unit and all vector_unit classes. The dimensions can be displayed optionally between brackets like '[]' too.

* \fn vector<dimension> scifir::create_base_dimensions(const vector<dimension>& x)
* \brief Creates all the base dimensions from a vector of dimensions.

* \fn vector<dimension> scifir::create_base_dimensions(const vector<dimension>& x, long double& value)
* \brief Creates all the base dimensions from a vector of dimensions, updating also the associated value related to those dimensions based on the prefix math and the conversion factor of the dimension, if that conversion factor is different than one.

* \fn vector<dimension> scifir::multiply_dimensions(const vector<dimension>& x, const vector<dimension>& y)
* \brief Multiplies two vectors of dimensions. The result is normalized after, which means that equal dimensions at the numerator and at the denominator are cancelled.

* \fn vector<dimension> scifir::multiply_dimensions(vector<dimension> x, const vector<dimension>& y, long double& value)
* \brief Multiplies two vectors of dimensions. The result is normalized after, which means that equal dimensions at the numerator and at the denominator are cancelled. It also updates the value associated with those two vectors of dimensions with the prefix m ath and the conversion factor of those dimensions.

* \fn vector<dimension> scifir::divide_dimensions(vector<dimension> x, const vector<dimension>& y, long double& value)
* \brief Divides the first vector of dimensions with the other. The result is normalized after, which means that equal dimensions at the numerator and at the denominator are cancelled. It also updates the value associated with those two vectors of dimensions with the prefix m ath and the conversion factor of those dimensions.

* \fn vector<dimension> scifir::square_dimensions(vector<dimension> x, int index, long double& value)
* \brief Squares a vector of dimensions by an index. The value is updated too related to the prefix math and the conversion factor of this operation.

* \fn vector<dimension> scifir::power_dimensions(const vector<dimension>& x, int exponent)
* \brief Powers the dimensions by an exponent.

* \fn vector<dimension> scifir::normalize_dimensions(const vector<dimension>& x)
* \brief Normalizes the dimensions, which means that repited dimensions at the numerator and at the denominator are cancelled.

* \fn vector<dimension> scifir::normalize_dimensions(const vector<dimension>& x, long double& value)
* \brief Normalizes the dimensions, which means that repited dimensions at the numerator and at the denominator are cancelled. The value is updated if there are dimensions cancelled.

* \fn bool scifir::common_dimension(const dimension& x, const dimension& y)
* \brief Checks if there's an equal basic dimension between the basic dimensions of those two dimensions.

* \fn bool scifir::equal_dimensions(const string& init_dimensions_x, const string& init_dimensions_y)
* \brief Checks if two initialization strings of dimensions initialize the same basic dimensions.

* \fn bool scifir::equal_dimensions(const vector<dimension>& x, const vector<dimension>& y)
* brief Checks if the base dimensions of two vectors of dimensions are equal.

* \fn bool scifir::equal_dimensions_and_prefixes(const vector<dimension>& x, const vector<dimension>& y)
* \brief Checks if the base dimensions of two vectors of dimensions are equal, and if they have also the same prefixes.

* \fn bool operator ==(const scifir::dimension& x, const scifir::dimension& y)
* \brief Checks if the dimension type, the position and the prefix of two dimensions are the same.

* \fn bool operator !=(const scifir::dimension& x, const scifir::dimension& y)
* \brief Checks if the dimension type and the position of two dimensions are any of them different. The prefix is not compared.

* \fn ostream& operator <<(ostream& os, const scifir::dimension& x)
* \brief Adds the string representation of a dimension to an output stream.
*/